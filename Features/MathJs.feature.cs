// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NUnit_practice.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("MathJs queries")]
    public partial class MathJsQueriesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "MathJs.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "MathJs queries", "Tests for some REST API calls for the MathJs service", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
#line 6
 testRunner.Given("I initialized a REST connection to MathJs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get result of additions")]
        [NUnit.Framework.CategoryAttribute("Post")]
        [NUnit.Framework.CategoryAttribute("Addition")]
        [NUnit.Framework.TestCaseAttribute("3 + 5", "8", null)]
        [NUnit.Framework.TestCaseAttribute("-3 + 5", "2", null)]
        [NUnit.Framework.TestCaseAttribute("(-3) + (-3)", "-6", null)]
        [NUnit.Framework.TestCaseAttribute("3 + 0", "3", null)]
        [NUnit.Framework.TestCaseAttribute("0 + (-3)", "-3", null)]
        [NUnit.Framework.TestCaseAttribute("3 + 2 + 3", "8", null)]
        [NUnit.Framework.TestCaseAttribute("(3 + 2) + 3", "8", null)]
        [NUnit.Framework.TestCaseAttribute("3 + (2 + 3)", "8", null)]
        public void GetResultOfAdditions(string expression, string expectedOutput, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Post",
                    "Addition"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("expression", expression);
            argumentsOfScenario.Add("expectedOutput", expectedOutput);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get result of additions", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 11
 testRunner.When(string.Format("I send {0} for evaluation using POST request", expression), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 12
 testRunner.Then(string.Format("I get result equal to {0}", expectedOutput), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get result of substractions")]
        [NUnit.Framework.CategoryAttribute("Post")]
        [NUnit.Framework.CategoryAttribute("Substraction")]
        [NUnit.Framework.TestCaseAttribute("3 - 5", "-2", null)]
        [NUnit.Framework.TestCaseAttribute("-3 - 5", "-8", null)]
        [NUnit.Framework.TestCaseAttribute("(-3) - (-3)", "0", null)]
        [NUnit.Framework.TestCaseAttribute("3 - 0", "3", null)]
        [NUnit.Framework.TestCaseAttribute("0 - (-3)", "3", null)]
        [NUnit.Framework.TestCaseAttribute("3 - 2 - 3", "-2", null)]
        [NUnit.Framework.TestCaseAttribute("(3 - 2) - 3", "-2", null)]
        [NUnit.Framework.TestCaseAttribute("3 - (2 - 3)", "4", null)]
        public void GetResultOfSubstractions(string expression, string expectedOutput, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Post",
                    "Substraction"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("expression", expression);
            argumentsOfScenario.Add("expectedOutput", expectedOutput);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get result of substractions", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 27
 testRunner.When(string.Format("I send {0} for evaluation using POST request", expression), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 28
 testRunner.Then(string.Format("I get result equal to {0}", expectedOutput), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get result of multiplications")]
        [NUnit.Framework.CategoryAttribute("Post")]
        [NUnit.Framework.CategoryAttribute("Multiplication")]
        [NUnit.Framework.TestCaseAttribute("3 * 5", "15", null)]
        [NUnit.Framework.TestCaseAttribute("-3 * 5", "-15", null)]
        [NUnit.Framework.TestCaseAttribute("(-3) * (-3)", "9", null)]
        [NUnit.Framework.TestCaseAttribute("3 * 0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("0 * (-3)", "0", null)]
        [NUnit.Framework.TestCaseAttribute("3 * 2 * 3", "18", null)]
        [NUnit.Framework.TestCaseAttribute("(3 * 2) * 3", "18", null)]
        [NUnit.Framework.TestCaseAttribute("3 * (2 * 3)", "18", null)]
        public void GetResultOfMultiplications(string expression, string expectedOutput, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Post",
                    "Multiplication"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("expression", expression);
            argumentsOfScenario.Add("expectedOutput", expectedOutput);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get result of multiplications", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 43
 testRunner.When(string.Format("I send {0} for evaluation using POST request", expression), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 44
 testRunner.Then(string.Format("I get result equal to {0}", expectedOutput), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get result of divisions")]
        [NUnit.Framework.CategoryAttribute("Post")]
        [NUnit.Framework.CategoryAttribute("Division")]
        [NUnit.Framework.TestCaseAttribute("3 / 5", "0.6", "4", null)]
        [NUnit.Framework.TestCaseAttribute("-3 / 5", "-0.6", "4", null)]
        [NUnit.Framework.TestCaseAttribute("(-3) / (-3)", "1", "4", null)]
        [NUnit.Framework.TestCaseAttribute("0 / (-3)", "0", "4", null)]
        [NUnit.Framework.TestCaseAttribute("0 / 3", "0", "4", null)]
        [NUnit.Framework.TestCaseAttribute("3 / 2 / 3", "0.5", "4", null)]
        [NUnit.Framework.TestCaseAttribute("(3 / 2) / 3", "0.5", "4", null)]
        [NUnit.Framework.TestCaseAttribute("3 / (2 / 3)", "4.5", "4", null)]
        public void GetResultOfDivisions(string expression, string expectedOutput, string precision, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Post",
                    "Division"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("expression", expression);
            argumentsOfScenario.Add("expectedOutput", expectedOutput);
            argumentsOfScenario.Add("precision", precision);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get result of divisions", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 59
 testRunner.When(string.Format("I send {0} for evaluation using POST request", expression), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 60
 testRunner.Then(string.Format("I get result equal to {0}", expectedOutput), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Evaluate division by zero")]
        [NUnit.Framework.CategoryAttribute("Post")]
        [NUnit.Framework.CategoryAttribute("Division")]
        [NUnit.Framework.CategoryAttribute("ZeroDivision")]
        [NUnit.Framework.TestCaseAttribute("2 / 0", "Infinity", null)]
        [NUnit.Framework.TestCaseAttribute("2 / -0", "-Infinity", null)]
        [NUnit.Framework.TestCaseAttribute("-2 / 0", "-Infinity", null)]
        [NUnit.Framework.TestCaseAttribute("-2 / -0", "Infinity", null)]
        [NUnit.Framework.TestCaseAttribute("0/0", "NaN", null)]
        public void EvaluateDivisionByZero(string expression, string expectedOutput, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Post",
                    "Division",
                    "ZeroDivision"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("expression", expression);
            argumentsOfScenario.Add("expectedOutput", expectedOutput);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Evaluate division by zero", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 75
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 76
 testRunner.When(string.Format("I send {0} for evaluation using POST request", expression), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 77
 testRunner.Then(string.Format("I get result equal to {0}", expectedOutput), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get result of square roots")]
        [NUnit.Framework.CategoryAttribute("Get")]
        [NUnit.Framework.CategoryAttribute("SquareRoot")]
        [NUnit.Framework.TestCaseAttribute("sqrt(0)", "0", "4", null)]
        [NUnit.Framework.TestCaseAttribute("sqrt(1)", "1", "4", null)]
        [NUnit.Framework.TestCaseAttribute("sqrt(4)", "2", "4", null)]
        [NUnit.Framework.TestCaseAttribute("sqrt(2)", "1.414", "4", null)]
        [NUnit.Framework.TestCaseAttribute("sqrt(-1)", "i", "4", null)]
        [NUnit.Framework.TestCaseAttribute("sqrt(i)", "0.7071 + 0.7071i", "4", null)]
        public void GetResultOfSquareRoots(string expression, string expectedOutput, string precision, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Get",
                    "SquareRoot"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("expression", expression);
            argumentsOfScenario.Add("expectedOutput", expectedOutput);
            argumentsOfScenario.Add("precision", precision);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get result of square roots", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 88
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 89
 testRunner.When(string.Format("I send {0} for evaluation with precision {1} using GET request", expression, precision), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 90
 testRunner.Then(string.Format("I get result equal to {0}", expectedOutput), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
